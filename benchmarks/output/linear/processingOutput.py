import os
import re

import datetime

save_path_QF_LRA = "/Users/razvanmetes/Optimization-Modulo-Theory/benchmarks/output/linear/QF_LRA"
save_path_QF_LIA = "/Users/razvanmetes/Optimization-Modulo-Theory/benchmarks/output/linear/QF_LIA"
save_path_QF_BV = "/Users/razvanmetes/Optimization-Modulo-Theory/benchmarks/output/linear/QF_BV"

for root, dirs, files in os.walk("/Users/razvanmetes/Optimization-Modulo-Theory", topdown=False):
   for name in files:
       if "output_SMT_Solver_Z3_" in os.path.join(root, name):
           if "SMT2" in os.path.join(root, name):
               if "-Sol" not in os.path.join(root, name):
                   aux = re.search('output_SMT_Solver_Z3_(.*)SMT2', os.path.join(root, name))
                   type_theory = (aux.group(1))
                   type_theory = type_theory[:-1]

                   if type_theory == 'RealReal':
                       partial_name = name.replace('.smt2', '')
                       completeName_Path = os.path.join(save_path_QF_LRA, partial_name + "_" + type_theory + ".smt2")
                       file = open(completeName_Path, "w")
                       file.write("(set-info :smt-lib-version 2.6)\n")
                       file.write("(set-logic QF_LRA)\n")
                       file.write("(set-info :source |\n")
                       file.write("Generated by: Mădălina Erașcu, Răzvan Meteș \n")
                       file.write("Generated on: "  + datetime.date.today().strftime("%Y-%m-%d") + "\n")
                       file.write("Application: "+ name.split('-')[0] + "\n")
                       file.write("Target solver: Z3\n")
                       file.write("|)\n")
                       file.write("(set-info :license \"https://creativecommons.org/licenses/by/4.0/\")\n")
                       file.write("(set-info :category \"industrial\")\n")
                       file.write("(set-info :minimum")
                       aux_path = os.path.join(root, name).split('/SMT2')[0] + "/csv/" + name.split('.smt2')[0] +".csv"

                       if os.stat(aux_path).st_size == 0:
                           file.write(" unknown\n")
                           file.write("\n")
                       else:
                           with open(aux_path) as fin:
                               next(fin)
                               for line in fin:
                                   min_price = line.split(None, 1)[0]
                               file.write(" " + min_price.split(',')[0] + "\n")
                               file.write("\n")
                       with open(os.path.join(root, name)) as f:
                           lines = f.readlines()
                           file.writelines(lines)
                       file.close()

                   if type_theory == 'RealBool':
                       partial_name = name.replace('.smt2', '')
                       completeName_Path = os.path.join(save_path_QF_LRA, partial_name + "_" + type_theory + ".smt2")
                       file = open(completeName_Path, "w")
                       file.write("(set-info :smt-lib-version 2.6)\n")
                       file.write("(set-logic QF_LRA)\n")
                       file.write("(set-info :source |\n")
                       file.write("Generated by: Mădălina Erașcu, Răzvan Meteș \n")
                       file.write("Generated on: "  + datetime.date.today().strftime("%Y-%m-%d") + "\n")
                       file.write("Application: "+ name.split('-')[0] + "\n")
                       file.write("Target solver: Z3\n")
                       file.write("|)\n")
                       file.write("(set-info :license \"https://creativecommons.org/licenses/by/4.0/\")\n")
                       file.write("(set-info :category \"industrial\")\n")
                       file.write("(set-info :minimum")
                       aux_path = os.path.join(root, name).split('/SMT2')[0] + "/csv/" + name.split('.smt2')[0] +".csv"

                       if os.stat(aux_path).st_size == 0:
                           file.write(" unknown\n")
                           file.write("\n")
                       else:
                           with open(aux_path) as fin:
                               next(fin)
                               for line in fin:
                                   min_price = line.split(None, 1)[0]
                               file.write(" " + min_price.split(',')[0] + "\n")
                               file.write("\n")
                       with open(os.path.join(root, name)) as f:
                           lines = f.readlines()
                           file.writelines(lines)
                       file.close()


                   if type_theory == 'IntIntOr':
                       partial_name = name.replace('.smt2', '')
                       completeName_Path = os.path.join(save_path_QF_LIA, partial_name + "_" + type_theory + ".smt2")
                       file = open(completeName_Path, "w")
                       file.write("(set-info :smt-lib-version 2.6)\n")
                       file.write("(set-logic QF_LIA)\n")
                       file.write("(set-info :source |\n")
                       file.write("Generated by: Mădălina Erașcu, Răzvan Meteș \n")
                       file.write("Generated on: "  + datetime.date.today().strftime("%Y-%m-%d") + "\n")
                       file.write("Application: "+ name.split('-')[0] + "\n")
                       file.write("Target solver: Z3\n")
                       file.write("|)\n")
                       file.write("(set-info :license \"https://creativecommons.org/licenses/by/4.0/\")\n")
                       file.write("(set-info :category \"industrial\")\n")
                       file.write("(set-info :minimum")
                       aux_path = os.path.join(root, name).split('/SMT2')[0] + "/csv/" + name.split('.smt2')[0] +".csv"

                       if os.stat(aux_path).st_size == 0:
                           file.write(" unknown\n")
                           file.write("\n")
                       else:
                           with open(aux_path) as fin:
                               next(fin)
                               for line in fin:
                                   min_price = line.split(None, 1)[0]
                               file.write(" " + min_price.split(',')[0] + "\n")
                               file.write("\n")
                       with open(os.path.join(root, name)) as f:
                           lines = f.readlines()
                           file.writelines(lines)
                       file.close()

                   if type_theory == 'IntIntLessThan':
                       partial_name = name.replace('.smt2', '')
                       completeName_Path = os.path.join(save_path_QF_LIA, partial_name + "_" + type_theory + ".smt2")
                       file = open(completeName_Path, "w")
                       file.write("(set-info :smt-lib-version 2.6)\n")
                       file.write("(set-logic QF_LIA)\n")
                       file.write("(set-info :source |\n")
                       file.write("Generated by: Mădălina Erașcu, Răzvan Meteș \n")
                       file.write("Generated on: "  + datetime.date.today().strftime("%Y-%m-%d") + "\n")
                       file.write("Application: "+ name.split('-')[0] + "\n")
                       file.write("Target solver: Z3\n")
                       file.write("|)\n")
                       file.write("(set-info :license \"https://creativecommons.org/licenses/by/4.0/\")\n")
                       file.write("(set-info :category \"industrial\")\n")
                       file.write("(set-info :minimum")
                       aux_path = os.path.join(root, name).split('/SMT2')[0] + "/csv/" + name.split('.smt2')[0] +".csv"

                       if os.stat(aux_path).st_size == 0:
                           file.write(" unknown\n")
                           file.write("\n")
                       else:
                           with open(aux_path) as fin:
                               next(fin)
                               for line in fin:
                                   min_price = line.split(None, 1)[0]
                               file.write(" " + min_price.split(',')[0] + "\n")
                               file.write("\n")
                       with open(os.path.join(root, name)) as f:
                           lines = f.readlines()
                           file.writelines(lines)
                       file.close()

                   if type_theory == 'BV':
                       partial_name = name.replace('.smt2', '')
                       completeName_Path = os.path.join(save_path_QF_BV, partial_name + "_" + type_theory + ".smt2")
                       file = open(completeName_Path, "w")
                       file.write("(set-info :smt-lib-version 2.6)\n")
                       file.write("(set-logic QF_BV)\n")
                       file.write("(set-info :source |\n")
                       file.write("Generated by: Mădălina Erașcu, Răzvan Meteș \n")
                       file.write("Generated on: "  + datetime.date.today().strftime("%Y-%m-%d") + "\n")
                       file.write("Application: "+ name.split('-')[0] + "\n")
                       file.write("Target solver: Z3\n")
                       file.write("|)\n")
                       file.write("(set-info :license \"https://creativecommons.org/licenses/by/4.0/\")\n")
                       file.write("(set-info :category \"industrial\")\n")
                       file.write("(set-info :minimum")
                       aux_path = os.path.join(root, name).split('/SMT2')[0] + "/csv/" + name.split('.smt2')[0] +".csv"

                       if os.stat(aux_path).st_size == 0:
                           file.write(" unknown\n")
                           file.write("\n")
                       else:
                           with open(aux_path) as fin:
                               next(fin)
                               for line in fin:
                                   min_price = line.split(None, 1)[0]
                               file.write(" " + min_price.split(',')[0] + "\n")
                               file.write("\n")
                       with open(os.path.join(root, name)) as f:
                           lines = f.readlines()
                           file.writelines(lines)
                       file.close()

                   if type_theory == 'PBC_ite':
                       partial_name = name.replace('.smt2', '')
                       completeName_Path = os.path.join(save_path_QF_LRA, partial_name + "_" + type_theory + ".smt2")
                       file = open(completeName_Path, "w")
                       file.write("(set-info :smt-lib-version 2.6)\n")
                       file.write("(set-logic QF_LRA)\n")
                       file.write("(set-info :source |\n")
                       file.write("Generated by: Mădălina Erașcu, Răzvan Meteș \n")
                       file.write("Generated on: "  + datetime.date.today().strftime("%Y-%m-%d") + "\n")
                       file.write("Application: "+ name.split('-')[0] + "\n")
                       file.write("Target solver: Z3\n")
                       file.write("|)\n")
                       file.write("(set-info :license \"https://creativecommons.org/licenses/by/4.0/\")\n")
                       file.write("(set-info :category \"industrial\")\n")
                       file.write("(set-info :minimum")
                       aux_path = os.path.join(root, name).split('/SMT2')[0] + "/csv/" + name.split('.smt2')[0] +".csv"

                       if os.stat(aux_path).st_size == 0:
                           file.write(" unknown\n")
                           file.write("\n")
                       else:
                           with open(aux_path) as fin:
                               next(fin)
                               for line in fin:
                                   min_price = line.split(None, 1)[0]
                               file.write(" " + min_price.split(',')[0] + "\n")
                               file.write("\n")
                       with open(os.path.join(root, name)) as f:
                           lines = f.readlines()
                           file.writelines(lines)
                       file.close()

                   if type_theory == 'PBC_nonite':
                       partial_name = name.replace('.smt2', '')
                       completeName_Path = os.path.join(save_path_QF_LRA, partial_name + "_" + type_theory + ".smt2")
                       file = open(completeName_Path, "w")
                       file.write("(set-info :smt-lib-version 2.6)\n")
                       file.write("(set-logic QF_LRA)\n")
                       file.write("(set-info :source |\n")
                       file.write("Generated by: Mădălina Erașcu, Răzvan Meteș \n")
                       file.write("Generated on: "  + datetime.date.today().strftime("%Y-%m-%d") + "\n")
                       file.write("Application: "+ name.split('-')[0] + "\n")
                       file.write("Target solver: Z3\n")
                       file.write("|)\n")
                       file.write("(set-info :license \"https://creativecommons.org/licenses/by/4.0/\")\n")
                       file.write("(set-info :category \"industrial\")\n")
                       file.write("(set-info :minimum")
                       aux_path = os.path.join(root, name).split('/SMT2')[0] + "/csv/" + name.split('.smt2')[0] +".csv"

                       if os.stat(aux_path).st_size == 0:
                           file.write(" unknown\n")
                           file.write("\n")
                       else:
                           with open(aux_path) as fin:
                               next(fin)
                               for line in fin:
                                   min_price = line.split(None, 1)[0]
                               file.write(" " + min_price.split(',')[0] + "\n")
                               file.write("\n")
                       with open(os.path.join(root, name)) as f:
                           lines = f.readlines()
                           file.writelines(lines)
                       file.close()